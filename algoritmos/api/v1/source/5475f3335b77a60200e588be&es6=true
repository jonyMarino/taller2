function* algorithm() {

    
    var palabra = "CONSERVATIONALISTZ";
    var key = "ABCZ";
    var key2="";
    var palabraEncriptada = "";

   

    yield * encriptar(palabra, key);


    yield ({
        step: "Â¡Has concluido! \n",
        variables: {
            "palabra":palabra,
            "clave":key,
            "resultado":palabraEncriptada,
        }
    });

    // compare two words, displaying our progress as we go
    function* encriptar(w1, w2) {

        // get bounds of surface we are displayed on
        var bounds = algo.BOUNDS.inflate(-10, -100);

        // layout is based on five rows and columns equal to the longest word
        var layout = new algo.layout.GridLayout(bounds, 3, Math.max(w1.length, w2.length));

        // display both words
        function displayWord(w, row) {
            var rectangulo = new Array(w.length);
            for (var i = 0; i < w.length; i += 1) {
                var box = layout.getBox(row, i).inflate(-4, -4);
                    
                    rectangulo[i] = new algo.render.Rectangle({
                    state: algo.render.kS_NORMAL,
                    shape: box,
                    text: w[i]
                });
            }
            return rectangulo;
        }

        rCadena=displayWord(w1, 0);
        
                //=comienzo
        yield ({
            step: _.sprintf("Encriptando %s con %s.", w1, w2),
            line: "comienzo",
            variables: {
                "palabra": w1,
                "clave": w2
            }
        });
        
        var clave = new Array(w1.length);
            for (var i = 0; i < w1.length; i += 1) {
                var box = layout.getBox(1, i).inflate(-4, -4);
                    
                    clave[i] = new algo.render.Rectangle({
                        state: algo.render.kS_NORMAL,
                        shape: box,
                        strokeWidth: 1,
                        stroke: 'blue',
                        fill: 'orange',
                        pen: 'black',
                        text: ""
                    });
                yield({
                    step: _.sprintf("Llenar con la clave %s:\n clave2[i] = clave[i mod clave.length]", w2),  
                    variables: {
                        "clave": w2,
                        "i":i,
                        "clave2":key2,
                    }
                });
                clave[i].set({
                    state: algo.render.kS_NORMAL,
                    text: w2[i%w2.length],
                });
                key2+= w2[i%w2.length];
                
            }
        //"                  "
        var a = new Array(w1.length);
        rResultado=displayWord(a, 2);
        

        for(var i=0;i<w1.length;i++){
            yield * encriptarCaracter(rCadena[i],clave[i],rResultado[i],i);
        }
        
        // destroy any previous display elements
        //algo.SURFACE.root.children.destroy();
        
    }
    
    function* encriptarCaracter(cadena,clave,resultado,i){
        var res=0;
        cadena.set({
            strokeWidth: 1,
            stroke: 'blue',
            fill: 'orange',
            pen: 'black',

        });
    
        clave.set({
            strokeWidth: 1,
            stroke: 'blue',
            fill: 'orange',
            pen: 'black',
        });
        //=bigrams
        yield ({
            step: _.sprintf("Encriptando %s con %s: \n resultado[i]=palabra[i]-ascii(A) + clave2[i] -ascii(A)' mod 26+ascii(A)", cadena.text,clave.text),
            variables: {
                "palabra":palabra,
                "clave2":key2,
                "i":i,
                "resultado":palabraEncriptada,
            }
            
        });
        res = String.fromCharCode((cadena.text.charCodeAt(0)-'A'.charCodeAt(0) + clave.text.charCodeAt(0) -'A'.charCodeAt(0))%26+'A'.charCodeAt(0));
        palabraEncriptada+=res;
        resultado.set({
            text : res,
        });
        
        cadena.set({
            state: algo.render.kS_NORMAL

        });
    
        clave.set({
            state: algo.render.kS_NORMAL
        });   

        
    }
}