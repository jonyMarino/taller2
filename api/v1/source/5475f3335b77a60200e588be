function* algorithm(frase,clave) {

    
    var palabra = frase || "ñHOLA ESTE ES EL SUPER PROGRAMA DE Jony Marino";
    var key = clave || "ñABCZasd";
    var key2="";
    var palabraEncriptada = "";
    var EXTENDED = [ 0x00C7, 0x00FC, 0x00E9, 0x00E2,
            0x00E4, 0x00E0, 0x00E5, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00EF,
            0x00EE, 0x00EC, 0x00C4, 0x00C5, 0x00C9, 0x00E6, 0x00C6, 0x00F4,
            0x00F6, 0x00F2, 0x00FB, 0x00F9, 0x00FF, 0x00D6, 0x00DC, 0x00A2,
            0x00A3, 0x00A5, 0x20A7, 0x0192, 0x00E1, 0x00ED, 0x00F3, 0x00FA,
            0x00F1, 0x00D1, 0x00AA, 0x00BA, 0x00BF, 0x2310, 0x00AC, 0x00BD,
            0x00BC, 0x00A1, 0x00AB, 0x00BB, 0x2591, 0x2592, 0x2593, 0x2502,
            0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557,
            0x255D, 0x255C, 0x255B, 0x2510, 0x2514, 0x2534, 0x252C, 0x251C,
            0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566,
            0x2560, 0x2550, 0x256C, 0x2567, 0x2568, 0x2564, 0x2565, 0x2559,
            0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588,
            0x2584, 0x258C, 0x2590, 0x2580, 0x03B1, 0x00DF, 0x0393, 0x03C0,
            0x03A3, 0x03C3, 0x00B5, 0x03C4, 0x03A6, 0x0398, 0x03A9, 0x03B4,
            0x221E, 0x03C6, 0x03B5, 0x2229, 0x2261, 0x00B1, 0x2265, 0x2264,
            0x2320, 0x2321, 0x00F7, 0x2248, 0x00B0, 0x2219, 0x00B7, 0x221A,
            0x207F, 0x00B2, 0x25A0, 0x00A0 ];

    function getAscii(code) {
        code = code.charCodeAt(0);
        if (code >= 0x80) {
            var i;
            extended = code - 0x80;
            for(i=0;i<0xFF-0x80;i++){
                if(EXTENDED[i]==code){
                    break;
                }
            }
            return i+0x80;
        }
        return code;
    }
    function getUTF8(code){
        if (code >= 0x80 && code <= 0xFF) {
            return EXTENDED[code - 0x80];
        }
        return code;
    }
    for (var i = 0; i < palabra.length; i += 1){
        key2+=key[i%key.length];
    }
    for(var i = 0 ; i < palabra.length ; i += 20 ){
        algo.SURFACE.root.children.destroy();
        var f = palabra.substring(i,i+20);
        var k = key2.substring(i,i+20);
        yield * encriptar(f, k,i);
    }

    yield ({
        step: "¡Has concluido! \n",
        variables: {
            "palabra":palabra,
            "clave":key,
            "resultado":palabraEncriptada,
        }
    });

    // compare two words, displaying our progress as we go
    function* encriptar(w1, w2,index) {

        // get bounds of surface we are displayed on
        var bounds = algo.BOUNDS.inflate(-10, -100);

        // layout is based on five rows and columns equal to the longest word
        var layout = new algo.layout.GridLayout(bounds, 6, 20); //Math.max(w1.length, w2.length)

        
        function displayWord(w, row) {
            var rectangulo = new Array(w.length);
            for (var i = 0; i < w.length; i += 1) {
                var box = layout.getBox(row, i).inflate(-4, -4);
                    
                    rectangulo[i] = new algo.render.Rectangle({
                    state: algo.render.kS_NORMAL,
                    shape: box,
                    text: w[i]
                });
            }
            return rectangulo;
        }
        
        function displayASCII(w, row){
            for (var i = 0; i < w.length; i += 1) {
                var box = layout.getBox(row, i).inflate(-4, -4);
                new algo.render.Rectangle({
                    state: algo.render.kS_NORMAL,
                    shape: box,
                    text: getAscii(w[i]),
                    strokeWidth: 0,
                    fontSize:20,
                    textAlign: 'top'
                });
            }
        }

        rCadena=displayWord(w1, 0);
        displayASCII(w1,1);
                //=comienzo
        yield ({
            step: _.sprintf("Encriptando %s con %s.", palabra, key),
            line: "comienzo",
            variables: {
                "palabra": palabra,
                "clave": key
            }
        });
        
        
        clave = displayWord(w2, 2);
        displayASCII(w2,3);
        //=extender clave
                yield ({
            step: _.sprintf("Extender la clave para que llegue a toda la frase", w1, w2),
            line: "extender clave",
            variables: {
                "palabra": w1,
                "clave": w2
            }
        });
        
        var a = new Array(w1.length);
        rResultado=displayWord(a, 4);
        rResultadoASCII=displayWord(a, 5);

        for(var i=0;i<w1.length;i++){
            yield * encriptarCaracter(rCadena[i],clave[i],rResultado[i],rResultadoASCII[i],i+index);
        }
        
    }
    
    function* encriptarCaracter(cadena,clave,resultado,resultadoASCII,i){
        var res=0;
        cadena.set({
            strokeWidth: 1,
            stroke: 'blue',
            fill: 'orange',
            pen: 'black',

        });
    
        clave.set({
            strokeWidth: 1,
            stroke: 'blue',
            fill: 'orange',
            pen: 'black',
        });
        //=bigrams
        yield ({
            step: _.sprintf("Encriptando %s con %s: \n resultado[i]=palabra[i]-ascii(A) + clave2[i] -ascii(A)' mod 26+ascii(A)", cadena.text,clave.text),
            variables: {
                "caracter":cadena.text,
                "clave":clave.text
            }
            
        });
        res = String.fromCharCode(getUTF8((getAscii(cadena.text) + getAscii(clave.text) )%256));
        palabraEncriptada+=res;
        resultado.set({
            text : res,
        });
        
        resultadoASCII.set({
            text : getAscii(res),
            strokeWidth: 0,
            fontSize:20,
            textAlign: 'top'
            
        });
        
        cadena.set({
            state: algo.render.kS_NORMAL

        });
    
        clave.set({
            state: algo.render.kS_NORMAL
        });   
		        //=bigrams
        yield ({
            step: _.sprintf("Encriptando %s con %s: \n resultado[i]=palabra[i]-ascii(A) + clave2[i] -ascii(A)' mod 26+ascii(A)", cadena.text,clave.text),
            variables: {
                "palabra":palabra,
                "clave":key,
				"i":i,
                "resultado":palabraEncriptada,
            }
            
        });

        
    }
}

